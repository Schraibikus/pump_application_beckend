import express, { Request, Response } from "express";
import cors from "cors";
import format from "pg-format";
import morgan from "morgan";
import pool from "./config/db.js"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É–ª –∏–∑ db.ts
import { Order } from "./temp/types.js";
import { convertToCamelCase } from "./utils/caseConverter.js";

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());
app.use(morgan("dev"));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
pool
  .connect()
  .then((client) => {
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!");
    client.release();
    startServer();
  })
  .catch((err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err);
    process.exit(1);
  });

function startServer() {
  // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  app.get("/api/products", async (_, res) => {
    try {
      const { rows } = await pool.query("SELECT * FROM products");
      res.json(rows);
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –µ–≥–æ ID
  app.get("/api/products/:id/parts", async (req, res) => {
    const { id } = req.params;
    try {
      const { rows } = await pool.query(
        `
        SELECT 
          p.id AS part_id,
          p.product_id,
          p.position,
          p.name,
          p.description,
          p.designation,
          p.quantity,
          p.drawing,
          p.positioning_top,
          p.positioning_left,
          p.positioning_top2,
          p.positioning_left2,
          p.positioning_top3,
          p.positioning_left3,
          p.positioning_top4,
          p.positioning_left4,
          p.positioning_top5,
          p.positioning_left5,
          pas.set_name,
          pas.position AS alt_position,
          pas.name AS alt_name,
          pas.description AS alt_description,
          pas.designation AS alt_designation,
          pas.quantity AS alt_quantity,
          pas.drawing AS alt_drawing
        FROM parts p
        LEFT JOIN part_alternative_sets pas ON p.id = pas.part_id
        WHERE p.product_id = $1
        `,
        [id]
      );

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å—Ç—è–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Å–≤–æ–π—Å—Ç–≤
      const groupedParts = rows.reduce((acc: { [key: number]: any }, row) => {
        if (!acc[row.part_id]) {
          acc[row.part_id] = {
            id: row.part_id,
            productId: row.product_id,
            position: row.position,
            name: row.name,
            description: row.description,
            designation: row.designation,
            quantity: row.quantity,
            drawing: row.drawing,
            positioningTop: row.positioning_top,
            positioningLeft: row.positioning_left,
            positioningTop2: row.positioning_top2,
            positioningLeft2: row.positioning_left2,
            positioningTop3: row.positioning_top3,
            positioningLeft3: row.positioning_left3,
            positioningTop4: row.positioning_top4,
            positioningLeft4: row.positioning_left4,
            positioningTop5: row.positioning_top5,
            positioningLeft5: row.positioning_left5,
            selectedSet: row.selected_set,
            alternativeSets: {},
          };
        }

        if (row.set_name) {
          acc[row.part_id].alternativeSets[row.set_name] = {
            position: row.alt_position,
            name: row.alt_name,
            description: row.alt_description,
            designation: row.alt_designation,
            quantity: row.alt_quantity,
            drawing: row.alt_drawing,
          };
        }

        return acc;
      }, {});

      const result = Object.values(groupedParts);
      const camelCaseResult = convertToCamelCase(result);

      res.json(camelCaseResult);
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  app.post("/api/orders", async (req: Request, res: Response) => {
    const { parts } = req.body as Order;
    const client = await pool.connect();

    try {
      await client.query("BEGIN");

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const { rows } = await client.query<{ id: number }>(
        `INSERT INTO orders (created_at) VALUES (NOW()) RETURNING id`
      );
      const orderId = rows[0].id;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
      const rowsData = parts.map((part) => [
        orderId,
        part.id,
        part.parentProductId,
        part.productName,
        part.productDrawing || null,
        part.position,
        part.name,
        part.description || null,
        part.designation || null,
        part.quantity,
        part.drawing || null,
        part.positioningTop ?? null,
        part.positioningLeft ?? null,
        part.positioningTop2 ?? null,
        part.positioningLeft2 ?? null,
        part.positioningTop3 ?? null,
        part.positioningLeft3 ?? null,
        part.positioningTop4 ?? null,
        part.positioningLeft4 ?? null,
        part.positioningTop5 ?? null,
        part.positioningLeft5 ?? null,
        part.selectedSet || null,
      ]);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é pg-format
      const query = format(
        `INSERT INTO order_parts (
        order_id, part_id, parent_product_id, product_name, product_drawing,
        position, name, description, designation, quantity, drawing,
        positioning_top, positioning_left,
        positioning_top2, positioning_left2,
        positioning_top3, positioning_left3,
        positioning_top4, positioning_left4,
        positioning_top5, positioning_left5,
        selected_set
      ) VALUES %L`,
        rowsData
      );

      await client.query(query);
      await client.query("COMMIT");

      res.status(201).json({
        orderId,
        createdAt: new Date().toISOString(),
        message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
      });
    } catch (error) {
      await client.query("ROLLBACK");
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    } finally {
      client.release();
    }
  });

  // üîπ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  app.delete(
    "/api/orders/:id",
    async (req: Request, res: Response): Promise<void> => {
      const { id } = req.params;

      if (!Number.isInteger(Number(id))) {
        res.status(400).json({ message: "Invalid order ID" });
        return; // –Ø–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
      }

      const client = await pool.connect();

      try {
        await client.query("BEGIN");

        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
        await client.query("DELETE FROM order_parts WHERE order_id = $1", [id]);

        // –£–¥–∞–ª—è–µ–º —Å–∞–º –∑–∞–∫–∞–∑
        const { rowCount } = await client.query(
          "DELETE FROM orders WHERE id = $1",
          [id]
        );

        if (rowCount === 0) {
          await client.query("ROLLBACK");
          res.status(404).json({ message: "Order not found" });
          return; // –Ø–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        }

        await client.query("COMMIT");
        res.sendStatus(204); // –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ, –Ω–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
      } catch (error: any) {
        await client.query("ROLLBACK");
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error.message);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
      } finally {
        client.release(); // –í—Å–µ–≥–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      }
    }
  );

  // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
  app.get("/api/orders", async (_: Request, res: Response) => {
    try {
      const { rows: orders } = await pool.query("SELECT * FROM orders");

      for (const order of orders) {
        const { rows: parts } = await pool.query(
          "SELECT * FROM order_parts WHERE order_id = $1",
          [order.id]
        );
        order.parts = parts || [];
      }

      const camelCaseOrders = convertToCamelCase(orders);
      res.json(camelCaseOrders);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤" });
    }
  });

  app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${PORT}`);
  });
}
