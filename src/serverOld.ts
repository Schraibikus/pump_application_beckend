import express from "express";
import { Request, Response } from "express";
import cors from "cors";
import pool from "./config/db.js";
import morgan from "morgan";
import { ResultSetHeader } from "mysql2";

const app = express();
const PORT = 5000;

// –ù–∞—Å—Ç—Ä–æ–∏–º middleware
app.use(cors());
app.use(express.json());
app.use(morgan("dev")); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤

console.log("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL...");

pool
  .getConnection()
  .then((conn) => {
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å–ø–µ—à–Ω–æ!");
    conn.release();
    startServer(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  })
  .catch((err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL:", err);
    process.exit(1); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
  });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
function startServer() {
  // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  app.get("/api/products", async (_, res) => {
    try {
      const [rows] = await pool.query("SELECT * FROM products");
      res.json(rows);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –µ–≥–æ ID
  app.get("/api/products/:id/parts", async (req, res) => {
    const { id } = req.params;
    try {
      const [rows] = await pool.query(
        "SELECT * FROM parts WHERE product_id = ?",
        [id]
      );
      res.json(rows);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  // üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
  app.post("/api/orders", async (req, res) => {
    const { id, name, drawing, parts } = req.body;

    try {
      // –í—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const [result] = await pool.query<ResultSetHeader>(
        "INSERT INTO orders (product_id, name, drawing) VALUES (?, ?, ?)",
        [id, name, drawing]
      );

      const orderId = result.insertId;

      // –í—Å—Ç–∞–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
      for (const part of parts) {
        await pool.query(
          "INSERT INTO order_parts (order_id, part_id, quantity) VALUES (?, ?, ?)",
          [orderId, part.id, part.quantity]
        );
      }

      res.status(201).json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", orderId });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  //  –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
  app.get("/api/orders", async (_, res) => {
    try {
      const [rows] = await pool.query("SELECT * FROM orders");
      res.json(rows);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  });
}
